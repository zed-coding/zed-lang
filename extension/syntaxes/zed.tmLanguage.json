{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Zed",
  "patterns": [
      {
          "include": "#comments"
      },
      {
          "include": "#includes"
      },
      {
          "include": "#keywords"
      },
      {
          "include": "#strings"
      },
      {
          "include": "#numbers"
      },
      {
          "include": "#functions"
      },
      {
          "include": "#operators"
      },
      {
          "include": "#punctuation"
      },
      {
          "include": "#inline_asm"
      }
  ],
  "repository": {
      "comments": {
          "patterns": [
              {
                  "name": "comment.line.double-slash.zed",
                  "match": "//.*$"
              },
              {
                  "name": "comment.block.zed",
                  "begin": "/\\*",
                  "end": "\\*/"
              }
          ]
      },
      "includes": {
          "patterns": [
              {
                  "name": "keyword.control.import.zed",
                  "match": "@include"
              },
              {
                  "name": "keyword.control.import.from.zed",
                  "match": "\\bfrom\\b"
              }
          ]
      },
      "keywords": {
          "patterns": [
              {
                  "name": "keyword.control.zed",
                  "match": "\\b(if|else|while|return|fn|asm)\\b"
              }
          ]
      },
      "strings": {
          "name": "string.quoted.double.zed",
          "begin": "\"",
          "end": "\"",
          "patterns": [
              {
                  "name": "constant.character.escape.zed",
                  "match": "\\\\[\\\\\"nrt]"
              }
          ]
      },
      "numbers": {
          "name": "constant.numeric.zed",
          "match": "\\b-?[0-9]+\\b"
      },
      "functions": {
          "patterns": [
              {
                  "name": "entity.name.function.declaration.zed",
                  "match": "(?<=fn\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
              },
              {
                  "name": "entity.name.function.call.zed",
                  "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                  "captures": {
                      "1": { "name": "entity.name.function.call.zed" }
                  }
              }
          ]
      },
      "operators": {
          "patterns": [
              {
                  "name": "keyword.operator.assignment.zed",
                  "match": "="
              },
              {
                  "name": "keyword.operator.arithmetic.zed",
                  "match": "[+\\-*/%]"
              },
              {
                  "name": "keyword.operator.comparison.zed",
                  "match": "(==|<=|>=|<|>)"
              }
          ]
      },
      "punctuation": {
          "patterns": [
              {
                  "name": "punctuation.separator.zed",
                  "match": "[{}();,:\\[\\]]"
              }
          ]
      },
      "inline_asm": {
          "patterns": [
              {
                  "name": "meta.inline.asm.zed",
                  "begin": "\\b(asm)\\s*\"",
                  "end": "\"",
                  "beginCaptures": {
                      "1": { "name": "keyword.control.zed" }
                  },
                  "patterns": [
                      {
                          "name": "constant.character.escape.asm.zed",
                          "match": "\\\\[\\\\\"nrt]"
                      },
                      {
                          "name": "variable.other.register.asm.zed",
                          "match": "%[a-z0-9]+"
                      },
                      {
                          "name": "constant.numeric.asm.zed",
                          "match": "\\$[0-9]+"
                      },
                      {
                          "name": "support.function.asm.zed",
                          "match": "\\b(mov|add|sub|mul|div|push|pop|call|ret|syscall|xor|inc|dec|cmp|j[a-z]+)q?\\b"
                      }
                  ]
              },
              {
                  "name": "string.quoted.double.asm.constraint.zed",
                  "match": "\"[=]?[a-z]+\""
              }
          ]
      }
  },
  "scopeName": "source.zed"
}
