{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Zed",
  "patterns": [
      {
          "include": "#comments"
      },
      {
          "include": "#includes"
      },
      {
          "include": "#keywords"
      },
      {
          "include": "#strings"
      },
      {
          "include": "#numbers"
      },
      {
          "include": "#functions"
      },
      {
          "include": "#variables"
      },
      {
          "include": "#operators"
      },
      {
          "include": "#punctuation"
      },
      {
          "include": "#inline_asm"
      }
  ],
  "repository": {
      "comments": {
          "patterns": [
              {
                  "name": "comment.line.double-slash.zed",
                  "match": "//.*$"
              },
              {
                  "name": "comment.block.zed",
                  "begin": "/\\*",
                  "end": "\\*/"
              }
          ]
      },
      "includes": {
          "patterns": [
              {
                  "match": "(@include)\\s*([<\"])([^>\"]+)([>\"])",
                  "captures": {
                      "1": {
                          "name": "keyword.other.directive.zed"
                      },
                      "3": {
                          "name": "string.include.path.zed"
                      }
                  }
              },
              {
                  "match": "\\b(std)/([a-zA-Z0-9_/]+)\\b",
                  "captures": {
                      "1": {
                          "name": "support.type.std.zed"
                      },
                      "2": {
                          "name": "entity.name.namespace.zed"
                      }
                  }
              }
          ]
      },
      "keywords": {
          "patterns": [
              {
                  "name": "keyword.declaration.function.zed",
                  "match": "\\bfn\\b"
              },
              {
                  "name": "keyword.control.flow.zed",
                  "match": "\\b(if|else|while)\\b"
              },
              {
                  "name": "keyword.control.zed",
                  "match": "\\b(return|asm)\\b"
              }
          ]
      },
      "strings": {
          "name": "string.quoted.double.zed",
          "begin": "\"",
          "end": "\"",
          "patterns": [
              {
                  "name": "constant.character.escape.zed",
                  "match": "\\\\([\"\\\\nrtbfv0']|x[0-9A-Fa-f]{2})"
              }
          ]
      },
      "numbers": {
          "patterns": [
              {
                  "name": "constant.numeric.decimal.zed",
                  "match": "\\b-?[0-9]+\\b"
              },
              {
                  "name": "constant.numeric.hex.zed",
                  "match": "\\b0x[0-9A-Fa-f]+\\b"
              }
          ]
      },
      "functions": {
          "patterns": [
              {
                  "begin": "(?<=fn\\s+)([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(([^)]*)\\)",
                  "beginCaptures": {
                      "1": {
                          "name": "entity.name.function.declaration.zed"
                      },
                      "2": {
                          "patterns": [
                              {
                                  "match": "[a-zA-Z_][a-zA-Z0-9_]*",
                                  "name": "variable.parameter.zed"
                              }
                          ]
                      }
                  },
                  "end": "(?={)"
              },
              {
                  "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                  "captures": {
                      "1": {
                          "name": "entity.name.function.call.zed"
                      }
                  }
              }
          ]
      },
      "variables": {
          "patterns": [
              {
                  "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
                  "name": "variable.other.zed"
              }
          ]
      },
      "operators": {
          "patterns": [
              {
                  "name": "keyword.operator.assignment.zed",
                  "match": "="
              },
              {
                  "name": "keyword.operator.arithmetic.zed",
                  "match": "[+\\-*/%]"
              },
              {
                  "name": "keyword.operator.logical.zed",
                  "match": "(&&|\\|\\|)"
              },
              {
                  "name": "keyword.operator.comparison.zed",
                  "match": "(==|!=|<=|>=|<|>)"
              }
          ]
      },
      "punctuation": {
          "patterns": [
              {
                  "name": "punctuation.separator.zed",
                  "match": "[{}();,:\\[\\]]"
              }
          ]
      },
      "inline_asm": {
          "patterns": [
              {
                  "begin": "\\b(asm)\\s*\"",
                  "end": "\"",
                  "beginCaptures": {
                      "1": {
                          "name": "keyword.control.asm.zed"
                      }
                  },
                  "patterns": [
                      {
                          "name": "variable.other.register.asm.zed",
                          "match": "%([a-z][a-z0-9]+|[er]?[a-z][xhl]|[er]?[sb]p|[er]?[di][li]|[er]?ip|[er][0-9]+[dwb]?)"
                      },
                      {
                          "name": "constant.numeric.asm.zed",
                          "match": "\\$-?[0-9]+"
                      },
                      {
                          "name": "support.function.asm.instruction.zed",
                          "match": "\\b(mov|add|sub|mul|div|imul|idiv|inc|dec|neg|and|or|xor|not|shl|shr|sal|sar|rol|ror|push|pop|lea|call|ret|syscall|int|test|cmp|jmp|j[a-z]{1,4})([bwlq])?\\b"
                      },
                      {
                          "name": "comment.line.number-sign.asm.zed",
                          "match": "#.*$"
                      }
                  ]
              }
          ]
      }
  },
  "scopeName": "source.zed"
}
