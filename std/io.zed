// I/O Operations

// Print a raw string (used internally for string literals)
fn puts(str) {
    asm "movq %rdi, %rsi      # input string to rsi
         subq $256, %rsp      # allocate buffer space
         movq %rsp, %r8       # r8 points to our buffer
         xor %rdx, %rdx       # zero source counter
         xor %rcx, %rcx       # zero dest counter
.copy:
         cmpb $0, (%rsi,%rdx) # check for null terminator
         je .write
         cmpb $92, (%rsi,%rdx)  # check for backslash
         jne .regular_char

         inc %rdx              # move past backslash
         movb (%rsi,%rdx), %al # get escape char

         cmpb $110, %al       # check for 'n'
         jne .check_t
         movb $10, (%r8,%rcx)  # newline
         jmp .next
.check_t:
         cmpb $116, %al       # check for 't'
         jne .check_r
         movb $9, (%r8,%rcx)   # tab
         jmp .next
.check_r:
         cmpb $114, %al       # check for 'r'
         jne .check_b
         movb $13, (%r8,%rcx)  # carriage return
         jmp .next
.check_b:
         cmpb $92, %al        # check for backslash
         jne .next
         movb $92, (%r8,%rcx)  # backslash
         jmp .next

.regular_char:
         movb (%rsi,%rdx), %al
         movb %al, (%r8,%rcx)
.next:
         inc %rdx
         inc %rcx
         jmp .copy

.write:
         movq $1, %rax        # syscall number for write
         movq $1, %rdi        # stdout fd
         movq %r8, %rsi       # buffer address
         movq %rcx, %rdx      # buffer length
         syscall
         addq $256, %rsp      # restore stack"
    :
    : "r"[str]
    : "rax", "rdi", "rsi", "rdx", "rcx", "r8";
}

// Print a single character
fn putchar(c) {
    asm "movq %rdi, %rax      # get character
         pushq %rax           # save character to stack
         movq $1, %rax        # syscall number for write
         movq $1, %rdi        # stdout fd
         movq %rsp, %rsi      # point to character
         movq $1, %rdx        # length is 1
         syscall
         popq %rax            # restore stack"
    :
    : "r"[c]
    : "rax", "rdi", "rsi", "rdx";
}

// Print a number
fn print_number(n) {
    // Handle negative numbers
    if (n < 0) {
        putchar(45);  // ASCII for '-'
        n = 0 - n;    // Make positive
    }

    // Handle zero case
    if (n == 0) {
        putchar(48);  // ASCII for '0'
        return;
    }

    // Convert number to string, digit by digit
    asm "movq %rdi, %rax     # number to print
         subq $32, %rsp      # allocate buffer
         movq %rsp, %rsi     # buffer pointer
         xorq %rcx, %rcx     # digit counter

    .divide:
         xorq %rdx, %rdx     # clear remainder
         movq $10, %r8       # divisor
         divq %r8            # divide by 10
         addq $48, %rdx      # convert remainder to ASCII
         movb %dl, (%rsi,%rcx)  # store digit
         incq %rcx           # increment count
         testq %rax, %rax    # check if more digits
         jnz .divide         # continue if yes

    .print:
         decq %rcx           # move to last digit
         movb (%rsi,%rcx), %al  # get digit
         pushq %rcx          # save counter
         movq %rax, %rdi     # set up for putchar
         call putchar        # print digit
         popq %rcx           # restore counter
         testq %rcx, %rcx    # check if more digits
         jns .print          # continue if yes

         addq $32, %rsp      # restore stack"
    :
    : "r"[n]
    : "rax", "rcx", "rdx", "rsi", "r8", "rdi";
}

// Print a string with newline
fn println(x) {
    puts(x);
}

// Print a numeric value with newline
fn vprintln(x) {
    print_number(x);
}
